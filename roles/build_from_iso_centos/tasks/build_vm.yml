---
- name: variable defaults
  set_fact:
    vm_address:      "{{vm_address      | default('') }}"
    vm_netmask_cidr: "{{vm_netmask_cidr | default('') }}"
    vm_gateway:      "{{vm_gateway      | default('') }}"
    vm_dns_server:   "{{vm_dns_server   | default('') }}"
    vm_domain:       "{{vm_domain       | default('') }}"
    vm_hostname:     "{{vm_hostname     | default('centosvm') }}"
    vm_name:         "{{vm_name         | default('centosvm') }}"
    vm_eth_name:     "{{vm_eth_name     | default('ens32') }}"
    vm_password_old: "{{kickstart_password | default('Changeme!') }}"
    vm_password_new: "{{vm_password | default('P@ssw0rd') }}"
    config_iso:      "{{vm_name}}-ks.iso"
    dnf_or_yum:      "dnf"


#Translate old version format to new version format
- name: set centos7 facts
  set_fact:
    distro: "centos"
    version: "7"
  when: version|lower == "centos7"

- name: set centos8 facts
  set_fact:
    distro: "centos"
    version: "8"
  when: version|lower == "centos8"

- name: set rocky8 facts
  set_fact:
    distro: "rocky"
    version: "8"
  when: version|lower == "rocky8"

- name: set alma8 facts
  set_fact:
    distro: "alma"
    version: "8"
  when: version|lower == "alma8"

- name: set rhel8 facts
  set_fact:
    distro: "rhel"
    version: "8"
  when: version|lower == "rhel8"
# end of version translation

- name: set dnf or yum
  set_fact:
    dnf_or_yum: "yum"
  when: version|float < 8

- name: distro and version vars lookup
  set_fact:
    #dnf_or_yum: "{{ lookup('vars', distro + version + '_dnf_or_yum') }}"
    install_iso: "{{ lookup('vars', distro + version + '_iso') }}"
    install_iso_url: "{{ lookup('vars', distro + version + '_iso_url') }}"
    kickstart_file:  "{{ lookup('vars', distro + version + '_kickstart_file') }}"
    kickstart_password: "{{ lookup('vars', distro + version + '_kickstart_password') }}"

- debug:
    msg: "{{distro}}: {{dnf_or_yum}}"

- name: Create kickstart ISO
  community.general.iso_create:
    src_files:
      - "{{kickstart_file}}"
    dest_iso: "{{ role_path }}/files/{{config_iso}}"
    interchange_level: 3
    joliet: 3
    vol_ident: OEMDRV
  delegate_to: localhost

- name: Copy kickstart iso to datastore
  community.vmware.vsphere_copy:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    src: "{{ role_path }}/files/{{config_iso}}"
    datacenter: "{{vcenter_datacenter}}"
    datastore: "{{ vm_datastore }}"
    path: "{{config_iso}}"
  delegate_to: localhost
  ignore_errors: true #if the playbook is being re-run while the vm is on, the iso cannot be replaced

- name: Check if install ISO exists
  community.vmware.vsphere_file:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    datacenter: "{{vcenter_datacenter}}"
    datastore: "{{ iso_datastore }}"
    path: "{{ install_iso }}"
    state: file
  register: install_iso_exists
  delegate_to: localhost
  ignore_errors: true

# upload install iso
- name: upload install iso
  include_tasks: upload_install_iso.yml
  when: install_iso_exists.failed

# check again
- name: Check if install ISO exists
  community.vmware.vsphere_file:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    datacenter: "{{vcenter_datacenter}}"
    datastore: "{{ iso_datastore }}"
    path: "{{ install_iso }}"
    state: file
  register: install_iso_exists2
  delegate_to: localhost
  ignore_errors: true

# last resort, have esx download it
- name: download via esx
  include_tasks: download_via_esx.yml
  when: install_iso_exists2.failed



- name: set default disks
  set_fact:
    default_disks:
      - size_gb: '{{ vm_disk_gb | default(40) }}'
        type: thin

- name: set default networks
  set_fact:
    default_networks:
      - name: "{{ vm_network | default('VM Network') }}"
        device_type: e1000

- name: Create VM
  community.vmware.vmware_guest:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    datacenter: "{{vcenter_datacenter}}"
    cluster: '{{vcenter_cluster}}'
    folder: /
    name: '{{ vm_name }}'
    state: present
    guest_id: centos8_64Guest
    datastore: '{{ vm_datastore }}'
    cdrom:
        - controller_number: 0
          unit_number: 0
          state: present
          type: iso
          iso_path: '[{{ iso_datastore }}] {{ install_iso }}'
        - controller_number: 0
          unit_number: 1
          state: present
          type: iso
          iso_path: '[{{ vm_datastore }}] {{config_iso}}'
    disk: '{{ disks|default(default_disks) }}'
    hardware:
      memory_mb: '{{ vm_memory_mb | default(2048) }}'
      num_cpus: '{{ vm_num_cpus | default(2) }}'
      nested_virt: '{{ nested_virtualization|default(false) }}'
      scsi: paravirtual
    networks: '{{ networks|default(default_networks) }}'
    wait_for_ip_address: no
  delegate_to: localhost
  register: deploy_vm

- name: set guest video memory
  community.vmware.vmware_guest_video:
    hostname: "{{ vcenter_address }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
    name: '{{ vm_name }}'
    gather_video_facts: false
    video_memory_mb: 16.0
    display_number: 1
    enable_3D: false
    use_auto_detect: false 
  delegate_to: localhost
  register: set_vram

# Create serial ports
- name: Create serial ports
  community.vmware.vmware_guest_serial_port:
    hostname: "{{ vcenter_address }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
    name: '{{ vm_name }}'
    backings: "{{serial_ports}}"
  delegate_to: localhost
  register: create_serial_ports
  when:
    - serial_ports is defined
    - serial_ports is not false

- name: Set boot order
  community.vmware.vmware_guest_boot_manager:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    name: '{{ vm_name }}'
    boot_delay: 1000
    enter_bios_setup: False
    boot_retry_enabled: True
    boot_retry_delay: 20000
    boot_firmware: bios
    secure_boot_enabled: False
    boot_order:
      - disk
      - cdrom
      - ethernet
      - floppy
  delegate_to: localhost
  register: vm_boot_order

- name: Power-On the virtual machine
  community.vmware.vmware_guest_powerstate:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    name: '{{ vm_name }}'
    state: powered-on
  delegate_to: localhost
  register: powerstate

- name: Wait for 30 seconds for menu
  wait_for: timeout=30
  delegate_to: localhost

- name: press I
  community.vmware.vmware_guest_sendkey:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    name: "{{ vm_name }}"
    string_send: "i"
  delegate_to: localhost

- name: press enter
  community.vmware.vmware_guest_sendkey:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    name: "{{ vm_name }}"
    keys_send: ENTER
  delegate_to: localhost

- name: Wait for VMware tools to become available
  community.vmware.vmware_guest_tools_wait:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    name: '{{ vm_name }}'
  delegate_to: localhost
  retries: 10
  delay: 60
  register: result
  until: result is succeeded

- name: Set root Passwd
  community.vmware.vmware_vm_shell:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    vm_username: "root"
    vm_password: '{{ vm_password_old }}'
    vm_id: '{{ vm_name }}'
    vm_shell: '/usr/bin/sh'
    vm_shell_args: "-c \"echo {{vm_password_new}} | passwd --stdin root\""
    wait_for_process: true
  delegate_to: localhost
  ignore_errors: yes

- name: Set admin Passwd
  community.vmware.vmware_vm_shell:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    vm_username: "root"
    vm_password: '{{ vm_password_new }}'
    vm_id: '{{ vm_name }}'
    vm_shell: '/usr/bin/sh'
    vm_shell_args: "-c \"echo {{vm_password_new}} | passwd --stdin admin\""
    wait_for_process: true
  delegate_to: localhost
  ignore_errors: yes

- name: Check Hostname
  community.vmware.vmware_vm_shell:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    vm_username: "{{ vm_username | default('root') }}"
    vm_password: '{{ vm_password_new }}'
    vm_id: '{{ vm_name }}'
    vm_shell: '/usr/bin/sh'
    vm_shell_args: " -c \"[ $(hostname) == {{ vm_hostname }}.{{ vm_domain }} ]\""
    wait_for_process: true
  register: checkhostname
  delegate_to: localhost
  ignore_errors: true

- name: Run shell command via vm_shell
  community.vmware.vmware_vm_shell:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    vm_username: "root"
    vm_password: '{{ vm_password_new }}'
    vm_id: '{{ vm_name }}'
    vm_shell: '/usr/bin/sh'
    vm_shell_args: "{{item}}"
    wait_for_process: true
  delegate_to: localhost
  retries: 3
  delay: 5
  register: result
  until: result is succeeded
  loop:
    - "-c \"echo {{vm_password_new}} | passwd --stdin admin\""
    - "-c \"hostnamectl set-hostname {{ vm_hostname }}.{{ vm_domain }}\""
    - "-c \"nmcli connection modify {{vm_eth_name}} IPv4.address {{vm_address}}/{{vm_netmask_cidr}} IPv4.gateway {{vm_gateway}} IPv4.method manual\""
    - "-c \"nmcli connection modify {{vm_eth_name}} IPv4.dns {{vm_dns_server}}\""

- name: Check selinux
  community.vmware.vmware_vm_shell:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    vm_username: "root"
    vm_password: '{{ vm_password_new }}'
    vm_id: '{{ vm_name }}'
    vm_shell: '/usr/bin/sh'
    vm_shell_args: " -c \"[ $(cat /etc/selinux/config | grep ^SELINUX=) == SELINUX=disabled ]\""
    wait_for_process: true
  register: checkselinux
  delegate_to: localhost
  ignore_errors: true

- name: Disable SELinux
  community.vmware.vmware_vm_shell:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    vm_username: "root"
    vm_password: '{{ vm_password_new }}'
    vm_id: '{{ vm_name }}'
    vm_shell: '/usr/bin/sh'
    vm_shell_args: " -c \"{{item}}\""
    wait_for_process: true
  delegate_to: localhost
  when: checkselinux is failed
  loop:
    - "sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config"
    - "sed -i 's/SELINUX=permissive/SELINUX=disabled/' /etc/selinux/config"

- name: reboot guest
  block:
  - name: Reboot-Guest
    community.vmware.vmware_guest_powerstate:
      hostname: '{{ vcenter_address }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      validate_certs: no
      name: '{{ vm_name }}'
      state: reboot-guest
    delegate_to: localhost
    register: deploy

  - name: Wait for 30 seconds
    wait_for: timeout=30
    delegate_to: localhost

  - name: Wait for VMware tools to become available by name
    community.vmware.vmware_guest_tools_wait:
      hostname: '{{ vcenter_address }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      validate_certs: no
      name: '{{ vm_name }}'
    delegate_to: localhost
    retries: 3
    delay: 15
    register: result
    until: result is succeeded

  - name: Wait for 30 seconds for VMware Tools refresh
    wait_for: timeout=30
    delegate_to: localhost
  when: (checkhostname is failed) or (checkselinux is failed)
###end: reboot guest

- name: CentOS 8 defibrilator
  community.vmware.vmware_vm_shell:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    vm_username: "{{ vm_username | default('root') }}"
    vm_password: '{{ vm_password_new }}'
    vm_id: '{{ vm_name }}'
    vm_shell: '/usr/bin/sh'
    vm_shell_args: " -c \"{{item}}\""
    wait_for_process: true
  delegate_to: localhost
  retries: 3
  delay: 5
  register: result
  until: result is succeeded
  ignore_errors: true
  loop:
    - "sed -i -e 's|mirrorlist=|#mirrorlist=|g' /etc/yum.repos.d/CentOS-*"
    - "sed -i -e 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*"
  when:
    - distro|lower == "centos"
    - version|float >= 8

- name: scale the paywall
  community.vmware.vmware_vm_shell:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    vm_username: "root"
    vm_password: '{{ vm_password_new }}'
    vm_id: '{{ vm_name }}'
    vm_shell: '/usr/bin/sh'
    vm_shell_args: " -c \"{{item}}\""
    wait_for_process: true
  delegate_to: localhost
  retries: 3
  delay: 5
  register: result
  until: result is succeeded
  ignore_errors: true
  loop:
    - "subscription-manager register --org {{ rhsm_orgid }} --activationkey {{ rhsm_activationkey }}"
    - "subscription-manager repos --enable codeready-builder-for-rhel-8-x86_64-rpms"
    - "yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm"
  when: distro|lower == "rhel"

- name: Install xRDP
  community.vmware.vmware_vm_shell:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    vm_username: "{{ vm_username | default('root') }}"
    vm_password: '{{ vm_password_new }}'
    vm_id: '{{ vm_name }}'
    vm_shell: '/usr/bin/sh'
    vm_shell_args: " -c \"{{item}}\""
    wait_for_process: true
  delegate_to: localhost
  retries: 3
  delay: 5
  register: result
  until: result is succeeded
  ignore_errors: true
  loop:
    - "{{dnf_or_yum}} install -y epel-release"
    - "{{dnf_or_yum}} install -y xrdp"
    - "xrdp-keygen xrdp auto"
    - "systemctl enable xrdp --now"
    - "firewall-cmd --permanent --add-port=3389/tcp"
    - "firewall-cmd --reload"
  when: install_xrdp|default(false)

- name: Install Ansible and related components
  community.vmware.vmware_vm_shell:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    vm_username: "{{ vm_username | default('root') }}"
    vm_password: '{{ vm_password_new }}'
    vm_id: '{{ vm_name }}'
    vm_shell: '/usr/bin/sh'
    vm_shell_args: " -c \"{{item}}\""
    wait_for_process: true
  delegate_to: localhost
  retries: 3
  delay: 5
  register: result
  until: result is succeeded
  ignore_errors: true
  loop:
    - "{{dnf_or_yum}} install -y epel-release"
    - "{{dnf_or_yum}} install -y ansible"
    - "{{dnf_or_yum}} install -y python3-pip"
    - "{{dnf_or_yum}} install -y python3-devel"
    - "{{dnf_or_yum}} groupinstall -y 'development tools'"
    - "pip3 install --upgrade pip"
    - "pip3 install netapp-lib"
    - "pip3 install pyvmomi"
    - "pip3 install pywinrm"
    - "pip3 install pycdlib"
  when: install_ansible|default(false)

- name: Run extra shell command via vm_shell
  community.vmware.vmware_vm_shell:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    vm_username: "{{ vm_username | default('root') }}"
    vm_password: '{{ vm_password_new }}'
    vm_id: "{{ vm_name }}"
    vm_shell: '/usr/bin/sh'
    vm_shell_args: " -c \"{{item}}\""
    wait_for_process: true
    timeout: 3600
  delegate_to: localhost
  retries: 3
  delay: 60
  register: result
  until: result is succeeded
  ignore_errors: true
  loop: "{{ extra_commands }}"
  when:
    - extra_commands is defined
