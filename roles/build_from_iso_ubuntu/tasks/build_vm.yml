---
- name: variable defaults
  set_fact:
    vm_address:      "{{vm_address      | default('') }}"
    vm_netmask_cidr: "{{vm_netmask_cidr | default('') }}"
    vm_gateway:      "{{vm_gateway      | default('') }}"
    vm_dns_server:   "{{vm_dns_server   | default('') }}"
    vm_domain:       "{{vm_domain       | default('') }}"
    vm_hostname:     "{{vm_hostname     | default('centosvm') }}"
    vm_name:         "{{vm_name         | default('centosvm') }}"
    vm_eth_name:     "{{vm_eth_name     | default('ens32') }}"
    vm_username:     "ubuntu"
    # vm_password:     "P@ssw0rd2"
    vm_password_old: "ubuntu" #"{{cloudinit_password | default('Changeme!') }}"
    vm_password:     "{{ vm_password | default('P@ssw0rd') }}"
    config_iso:      "{{ vm_name }}-seed.iso"
    dnf_or_yum:      "yum"

- name: set version defaults 
  set_fact:
    install_iso:        '{{ versions[edition][version].install_iso }}'
    install_iso_url:    '{{ versions[edition][version].install_iso }}'
    cloudinit_userdata: '{{ versions[edition][version].cloudinit_userdata }}'
    cloudinit_metadata: '{{ versions[edition][version].cloudinit_metadata }}'
    cloudinit_password: '{{ versions[edition][version].cloudinit_password }}'
  when: version != ""

- debug:
    msg:
      - "{{ versions[edition][version] }}"

- name: Create kickstart ISO
  community.general.iso_create:
    dest_iso: "{{ role_path }}/files/{{config_iso}}"    
    src_files:
      - "{{ cloudinit_userdata }}"
      - "{{ cloudinit_metadata }}"
    interchange_level: 4
    joliet: 3
    vol_ident: cidata
  delegate_to: localhost

- name: Copy kickstart iso to datastore
  community.vmware.vsphere_copy:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'  
    validate_certs: no 
    src: "{{ role_path }}/files/{{config_iso}}"
    datacenter: "{{vcenter_datacenter}}"
    datastore: "{{ vm_datastore }}"
    path: "{{config_iso}}"
  delegate_to: localhost
  ignore_errors: true #if the playbook is being re-run while the vm is on, the iso cannot be replaced

- name: Check if install ISO exists
  community.vmware.vsphere_file:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    datacenter: "{{vcenter_datacenter}}"
    datastore: "{{ iso_datastore }}"
    path: "{{ install_iso }}"
    state: file
  register: install_iso_exists
  delegate_to: localhost
  ignore_errors: true

# upload install iso
- name: upload install iso
  include_tasks: upload_install_iso.yml
  when: install_iso_exists.failed

# check again
- name: Check if install ISO exists
  community.vmware.vsphere_file:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    datacenter: "{{vcenter_datacenter}}"
    datastore: "{{ iso_datastore }}"
    path: "{{ install_iso }}"
    state: file
  register: install_iso_exists2
  delegate_to: localhost
  ignore_errors: true

# last resort, have esx download it
- name: download via esx
  include_tasks: download_via_esx.yml
  when: install_iso_exists2.failed

- name: Create VM
  community.vmware.vmware_guest:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}' 
    validate_certs: no 
    datacenter: "{{vcenter_datacenter}}"
    cluster: '{{vcenter_cluster}}'    
    folder: /
    name: '{{ vm_name }}'
    state: present
    guest_id: ubuntu64Guest
    cdrom:
        - controller_number: 0
          unit_number: 0
          state: present
          type: iso
          iso_path: '[{{ iso_datastore }}] {{ install_iso }}'
        - controller_number: 0
          unit_number: 1
          state: present
          type: iso
          iso_path: '[{{ vm_datastore }}] {{config_iso}}'
    disk:
    - size_gb: '{{ vm_disk_gb | default(40) }}'
      type: thin
      datastore: '{{ vm_datastore }}'
    hardware:
      memory_mb: '{{ vm_memory_mb | default(2048) }}'
      num_cpus: '{{ vm_num_cpus | default(2) }}'
      scsi: lsilogicsas
    networks:
    - name: "{{ vm_network | default('VM Network') }}"
      device_type: e1000
    wait_for_ip_address: no
  delegate_to: localhost
  register: deploy_vm

- name: Set boot order
  community.vmware.vmware_guest_boot_manager:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'   
    validate_certs: no  
    name: '{{ vm_name }}'
    boot_delay: 1000
    enter_bios_setup: False
    boot_retry_enabled: True
    boot_retry_delay: 20000
    boot_firmware: bios
    secure_boot_enabled: False
    boot_order:
      - disk
      - cdrom
      - ethernet
      - floppy
  delegate_to: localhost
  register: vm_boot_order

- name: Power-On the virtual machine
  community.vmware.vmware_guest_powerstate:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'    
    validate_certs: no 
    name: '{{ vm_name }}'
    state: powered-on
  delegate_to: localhost
  register: powerstate

- name: Check for VMware tools at boot
  community.vmware.vmware_guest_tools_wait:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'   
    validate_certs: no 
    name: '{{ vm_name }}'
  retries: 10
  delay: 60
  register: result           
  until: result is succeeded
  delegate_to: localhost
  register: check_tools_at_boot      

- name: Wait for 60 seconds for boot
  wait_for: timeout=60
  delegate_to: localhost
  when:
    - powerstate.changed   

- name: type yes
  community.vmware.vmware_guest_sendkey:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'     
    validate_certs: no 
    name: "{{ vm_name }}"
    string_send: "yes"
  delegate_to: localhost
  when:
    - powerstate.changed 

- name: press enter
  community.vmware.vmware_guest_sendkey:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'     
    validate_certs: no 
    name: "{{ vm_name }}"
    keys_send: ENTER
  delegate_to: localhost
  when:
    - powerstate.changed 

- name: Wait for VMware tools to become available 
  community.vmware.vmware_guest_tools_wait:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'   
    validate_certs: no 
    name: '{{ vm_name }}'
  delegate_to: localhost
  retries: 10
  delay: 60
  register: result           
  until: result is succeeded
  when:
    - powerstate.changed 

- include_tasks: retry_logins.yml
# VMware tools become available during autoinstall
# 
# - name: Wait for 10 minutes for cloudinit
#   wait_for: timeout=600
#   delegate_to: localhost

- name: Set ubuntu Passwd
  community.vmware.vmware_vm_shell:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'    
    validate_certs: no 
    vm_username: "{{ vm_username }}"
    vm_password: '{{ vm_password_old }}'
    vm_id: '{{ vm_name }}'
    vm_shell: '/usr/bin/sh'
    vm_shell_args: " -c \"echo {{vm_password_old }} | sudo -S echo -e '{{vm_password_old}}\n{{vm_password}}\n{{vm_password}}' | passwd \""
    wait_for_process: true
  delegate_to: localhost
  ignore_errors: yes   

- name: Verify password
  community.vmware.vmware_vm_shell:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'   
    validate_certs: no 
    vm_username: "{{ vm_username }}"
    vm_password: '{{ vm_password }}'
    vm_id: '{{ vm_name }}'
    vm_shell: '/usr/bin/sh'
    vm_shell_args: " -c \"echo {{vm_password }} | sudo -S ls\""
    wait_for_process: true
  register: verifypassword
  delegate_to: localhost 
  ignore_errors: false

- name: Check Hostname
  community.vmware.vmware_vm_shell:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'   
    validate_certs: no 
    vm_username: "{{ vm_username }}"
    vm_password: '{{ vm_password }}'
    vm_id: '{{ vm_name }}'
    vm_shell: '/usr/bin/sh'
    vm_shell_args: " -c \"echo {{vm_password }} | sudo -S [ $(hostname) == {{ vm_hostname }}.{{ vm_domain }} ]\""
    wait_for_process: true
  register: checkhostname
  delegate_to: localhost 
  ignore_errors: true 

- name: Configure network with nmcli
  community.vmware.vmware_vm_shell:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'   
    validate_certs: no 
    vm_username: "{{ vm_username }}"
    vm_password: '{{ vm_password }}'
    vm_id: '{{ vm_name }}'
    vm_shell: '/usr/bin/sh'
    vm_shell_args: " -c \"echo {{ vm_password }} | sudo -S {{item}}\""
    wait_for_process: true
  delegate_to: localhost  
  retries: 3
  delay: 5
  register: result           
  until: result is succeeded
  loop:
    # - "-c \"echo {{vm_password_new}} | passwd --stdin admin\""
    - "apt update"
    - "apt install -y network-manager"
    - "apt install -y net-tools"
    - "sed -i 's/managed=false/managed=true/' /etc/NetworkManager/NetworkManager.conf"
    - "sed -i '/renderer/d' /etc/netplan/00-installer-config.yaml"
    - "sed -i '3 i \\  renderer: NetworkManager' /etc/netplan/00-installer-config.yaml"    
    - "netplan apply"
    - "nmcli general reload"
    - "nmcli connection reload"
    # - "service network-manager restart"
    - "nmcli dev set {{vm_eth_name}} managed yes"
    - "nmcli connection add type ethernet ifname {{vm_eth_name}} con-name {{vm_eth_name}}"    
    - "hostnamectl set-hostname {{ vm_hostname }}.{{ vm_domain }}"
    - "nmcli connection modify {{vm_eth_name}} IPv4.address {{vm_address}}/{{vm_netmask_cidr}} IPv4.gateway {{vm_gateway}} IPv4.method manual"
    - "nmcli connection modify {{vm_eth_name}} IPv4.dns {{vm_dns_server}}"
    - "nmcli connection up {{vm_eth_name}}"
    - "nmcli connection delete netplan-{{vm_eth_name}}"

# including this in the autoinstall is fraught with peril
- name: Install ubuntu-desktop
  community.vmware.vmware_vm_shell:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'   
    validate_certs: no 
    vm_username: "{{ vm_username | default('root') }}"
    vm_password: '{{ vm_password }}'
    vm_id: '{{ vm_name }}'
    vm_shell: '/usr/bin/sh'
    vm_shell_args: " -c \"echo {{ vm_password }} | sudo -S {{item}}\""
    wait_for_process: true
  delegate_to: localhost  
  retries: 3
  delay: 5
  register: result           
  until: result is succeeded
  ignore_errors: true 
  loop:
    - "apt update"
    - "apt install -y ubuntu-desktop"
  when: install_xrdp|default(false)

- name: reboot guest
  include_tasks: reboot_guest.yml
  when: install_xrdp|default(false)  

- name: Install xRDP
  community.vmware.vmware_vm_shell:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'   
    validate_certs: no 
    vm_username: "{{ vm_username | default('root') }}"
    vm_password: '{{ vm_password }}'
    vm_id: '{{ vm_name }}'
    vm_shell: '/usr/bin/sh'
    vm_shell_args: " -c \"echo {{ vm_password }} | sudo -S {{item}}\""
    wait_for_process: true
  delegate_to: localhost  
  retries: 3
  delay: 5
  register: result           
  until: result is succeeded
  ignore_errors: true 
  loop:
    - "apt update"
    - "apt install -y xrdp"
    - "xrdp-keygen xrdp auto"
    - "systemctl enable xrdp --now"
    - "ufw allow 3389"
  when: install_xrdp|default(false)

# - name: Install Ansible and related components
#   community.vmware.vmware_vm_shell:
#     hostname: '{{ vcenter_address }}'
#     username: '{{ vcenter_username }}'
#     password: '{{ vcenter_password }}'   
#     validate_certs: no 
#     vm_username: "{{ vm_username | default('root') }}"
#     vm_password: '{{ vm_password }}'
#     vm_id: '{{ vm_name }}'
#     vm_shell: '/usr/bin/sh'
#     vm_shell_args: " -c \"{{item}}\""
#     wait_for_process: true
#   delegate_to: localhost  
#   retries: 3
#   delay: 5
#   register: result           
#   until: result is succeeded
#   ignore_errors: true 
#   loop:
#     - "echo {{ vm_password }} | sudo -S apt install -y ansible"
#     - "echo {{ vm_password }} | sudo -S apt install -y python3-pip"
#     - "echo {{ vm_password }} | sudo -S apt install -y python3-dev"
#     - "pip3 install --upgrade pip"
#     - "pip3 install netapp-lib"
#     - "pip3 install pyvmomi"
#     - "pip3 install pywinrm"
#     - "pip3 install pycdlib" 
#   when: install_ansible|default(false)

# - name: Run extra shell command via vm_shell
#   community.vmware.vmware_vm_shell:
#     hostname: '{{ vcenter_address }}'
#     username: '{{ vcenter_username }}'
#     password: '{{ vcenter_password }}'
#     validate_certs: no
#     vm_username: "{{ vm_username | default('root') }}"
#     vm_password: '{{ vm_password }}'
#     vm_id: "{{ vm_name }}"
#     vm_shell: '/usr/bin/sh'
#     vm_shell_args: " -c \"echo {{ vm_password }} | sudo -S {{item}}\""
#     wait_for_process: true
#     timeout: 3600
#   delegate_to: localhost
#   retries: 3
#   delay: 60
#   register: result
#   until: result is succeeded
#   ignore_errors: true
#   loop: "{{ extra_commands }}"
#   when:
#     - extra_commands is defined
