---
    # install_iso: "pfSense-CE-2.4.5-RELEASE-p1-amd64.iso"
    # install_iso_url: "https://atxfiles.pfsense.org/mirror/downloads/pfSense-CE-2.4.5-RELEASE-p1-amd64.iso.gz"

- name: variable processings
  set_fact:
    _vm_name: "{{vm_name | default('pfSense')}}"
    _install_iso: "{{install_iso | default('pfSense-CE-2.4.5-RELEASE-p1-amd64.iso')}}"
    _install_iso_url: "{{install_iso_url | default('https://atxfiles.pfsense.org/mirror/downloads/pfSense-CE-2.4.5-RELEASE-p1-amd64.iso.gz')}}"
    _vm_password_new: "{{vm_password_new | default('P@ssw0rd')}}"
    _vm_network_wan: "{{vm_network_wan   | default('VM Network')}}"
    _vm_network_lan: "{{vm_network_lan   | default('')}}"
    _vm_disk_gb: "{{vm_disk_gb | default(10)}}"
    _vm_memory_mb: "{{vm_memory_mb | default(1024)}}"
    _vm_num_cpus: "{{vm_num_cpus | default(1)}}"
    _config_xml_file: "{{config_xml_file | default('')}}"
  delegate_to: localhost
- name: Check if install ISO exists
  community.vmware.vsphere_file:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'   
    validate_certs: no
    datacenter: "{{ vcenter_datacenter }}"
    datastore: "{{ iso_datastore }}"
    path: "{{ _install_iso }}"
    state: file
  register: install_iso_exists
  delegate_to: localhost
  ignore_errors: true 
- name: Add ESXi to Ansible Hosts for SSH
  add_host:
    name: '{{ esxi_address }}'
    group: "esx"
    ansible_user: '{{ esxi_username }}'
    ansible_password: '{{ esxi_password }}'
    ansible_ssh_common_args: '-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
  when: install_iso_exists.failed
- name: Enable ESX SSH (TSM-SSH)
  community.vmware.vmware_host_service_manager:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'  
    validate_certs: no 
    esxi_hostname: '{{ esxi_hostname }}'
    service_name: TSM-SSH
    state: present
  register: tsm_ssh_service
  delegate_to: localhost
  when: install_iso_exists.failed
- name: Enable ESX Shell (TSM)
  community.vmware.vmware_host_service_manager:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'  
    validate_certs: no 
    esxi_hostname: '{{ esxi_hostname }}'
    service_name: TSM
    state: present
  register: tsm_service
  delegate_to: localhost
  when: install_iso_exists.failed
- name: Download the pfSense ISO
  shell: 'wget -P /vmfs/volumes/{{ iso_datastore }} {{ _install_iso_url }}'
  args:
    creates: '/vmfs/volumes/{{ iso_datastore }}/{{ _install_iso }}.gz'
  delegate_to: '{{ esxi_address }}'
  when: install_iso_exists.failed
- name: Extract the pfSense ISO
  shell: 'gunzip /vmfs/volumes/{{ iso_datastore }}/{{ _install_iso }}.gz'
  args:
    creates: '/vmfs/volumes/{{ iso_datastore }}/{{ _install_iso }}'
  delegate_to: '{{ esxi_address }}'
  when: install_iso_exists.failed
- name: Disable ESX SSH (TSM-SSH)
  community.vmware.vmware_host_service_manager:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'  
    validate_certs: no 
    esxi_hostname: '{{ esxi_hostname }}'
    service_name: TSM-SSH
    state: absent
  delegate_to: localhost
  when: tsm_ssh_service.changed
- name: Disable ESX Shell (TSM)
  community.vmware.vmware_host_service_manager:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'  
    validate_certs: no 
    esxi_hostname: '{{ esxi_hostname }}'
    service_name: TSM
    state: absent
  delegate_to: localhost
  when: tsm_service.changed
- name: Create VM
  community.vmware.vmware_guest:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}' 
    validate_certs: no 
    datacenter: "{{vcenter_datacenter}}"
    cluster: '{{vcenter_cluster}}'    
    folder: /
    name: '{{ _vm_name }}'
    state: present
    guest_id: centos7_64Guest
    cdrom:
        - controller_number: 0
          unit_number: 0
          state: present
          type: iso
          iso_path: '[{{ iso_datastore }}] {{ _install_iso }}'
    disk:
    - size_gb: '{{ _vm_disk_gb |int }}'
      type: thin
      datastore: '{{ vm_datastore }}'
    hardware:
      memory_mb: '{{ _vm_memory_mb |int}}'
      num_cpus: '{{ _vm_num_cpus |int}}'
      scsi: lsilogicsas
    networks:
    - name: '{{ _vm_network_wan }}'
      device_type: e1000
    - name: '{{ _vm_network_lan }}'
      device_type: e1000
    wait_for_ip_address: no
  delegate_to: localhost
  register: deploy_vm
  
- name: Set boot order
  community.vmware.vmware_guest_boot_manager:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'  
    validate_certs: no 
    name: '{{ _vm_name }}'
    boot_delay: 1000
    enter_bios_setup: False
    boot_retry_enabled: True
    boot_retry_delay: 20000
    boot_firmware: bios
    secure_boot_enabled: False
    boot_order:
      - disk
      - cdrom
      - ethernet
      - floppy
  delegate_to: localhost
- name: Power-On the virtual machine
  community.vmware.vmware_guest_powerstate:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'   
    validate_certs: no 
    name: '{{ _vm_name }}'
    state: powered-on
  delegate_to: localhost
  register: powerstate

- name: Check for VMware tools  
  community.vmware.vmware_guest_tools_wait:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'  
    validate_certs: no 
    name: '{{ _vm_name }}'
  delegate_to: localhost
  register: alreadyinstalled           
  ignore_errors: true

- block:
  - name: Wait for 60 seconds
    wait_for: timeout=60
    delegate_to: localhost
  - name: Blind Install
    community.vmware.vmware_guest_sendkey:
      hostname: '{{ vcenter_address }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'   
      validate_certs: no 
      name: "{{ _vm_name }}"
      keys_send: ENTER
      string_send: "{{item}}"
    delegate_to: localhost
    loop: 
      - "" # enter
      - "" # enter
      - "" # enter
      - "" # enter
  - name: Wait for 120 seconds
    wait_for: timeout=120
    delegate_to: localhost
  - name: Blind Install part 2
    community.vmware.vmware_guest_sendkey:
      hostname: '{{ vcenter_address }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'  
      validate_certs: no 
      name: "{{ _vm_name }}"
      keys_send: ENTER
      string_send: "{{item}}"
    delegate_to: localhost
    loop: 
      - "" # enter 
      - "" # enter
  - name: Wait for 120 seconds
    wait_for: timeout=120
    delegate_to: localhost
  - name: Blind Install part 3 - Open-VM-Tools
    community.vmware.vmware_guest_sendkey:
      hostname: '{{ vcenter_address }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'  
      validate_certs: no 
      name: "{{ _vm_name }}"
      keys_send: ENTER
      string_send: "{{item}}"
    delegate_to: localhost
    loop: 
      - "8" # enter
      - "pkg install -y pfSense-pkg-Open-VM-Tools" # enter
      - "service vmware-guestd.sh start"
      - ""
  - name: Wait for VMware tools to become available 
    community.vmware.vmware_guest_tools_wait:
      hostname: '{{ vcenter_address }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'  
      validate_certs: no 
      name: '{{ _vm_name }}'
    delegate_to: localhost
    retries: 10
    delay: 60
    register: result           
    until: result is succeeded
  when: alreadyinstalled is failed

# push config file
- name: copy file to vm 
  community.vmware.vmware_guest_file_operation:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'  
    validate_certs: no 
    #datacenter: "{{ datacenter_name }}"
    vm_id: '{{ _vm_name }}'
    vm_username: "admin"
    vm_password: "pfsense" # defaults are still in effect at this point
    copy:
        src: "{{_config_xml_file}}"
        dest: "/cf/conf/config.xml"
        overwrite: True
  delegate_to: localhost
  register: copyconfig
  when: _config_xml_file != ""
  ignore_errors: true

- block:
  - name: Reboot-Guest
    community.vmware.vmware_guest_powerstate:
      hostname: '{{ vcenter_address }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'   
      validate_certs: no 
      name: '{{ _vm_name }}'
      state: reboot-guest
    delegate_to: localhost
    register: deploy
  - name: Wait for 30 seconds
    wait_for: timeout=30
    delegate_to: localhost
    when: _config_xml_file != ""

  - name: Wait for VMware tools to become available by name
    community.vmware.vmware_guest_tools_wait:
      hostname: '{{ vcenter_address }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'  
      validate_certs: no 
      name: '{{ _vm_name }}'
    delegate_to: localhost
    retries: 3
    delay: 15
    register: result           
    until: result is succeeded 
    when: _config_xml_file != ""
  when: copyconfig is succeeded

# Any additional packages required need to be installed 
- name: Run shell commands via vm_shell
  community.vmware.vmware_vm_shell:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'   
    validate_certs: no 
    vm_username: "root"
    vm_password: '{{ _vm_password_new }}'
    vm_id: '{{ _vm_name }}'
    vm_shell: '/bin/sh'
    vm_shell_args: " -c \"{{item}}\""
    wait_for_process: true
  delegate_to: localhost  
  loop:
    - "pkg install -y pfSense-pkg-tftpd"

 
