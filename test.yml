---
- name: TEST
  hosts: localhost
  gather_facts: false
  vars:
    vm_name: lab_ansible_v2a_dc01
    vm_hostname: dc01
    vm_username: ".\\administrator"
    vm_password: P@ssw0rd
    vm_domain: lab.local
    extra_commands:
      # Install Chrome
      - "Invoke-WebRequest -Uri http://dl.google.com/chrome/install/375.126/chrome_installer.exe -OutFile C:\\Windows\\temp\\chrome_installer.exe"
      - "C:\\Windows\\temp\\chrome_installer.exe /silent /install"
      # Install Putty
      - "Invoke-WebRequest -Uri http://the.earth.li/~sgtatham/putty/0.73/w64/putty-64bit-0.73-installer.msi -OutFile C:\\Windows\\temp\\putty-64bit-installer.msi"
      - "MsiExec.exe /i C:\\Windows\\temp\\putty-64bit-installer.msi /qn"

  vars_files: 
    - vars/main.yml
  tasks:
  #- include_vars: defaults/Build_CentOS7_VM_from_ISO.yml
  # - include_tasks: tasks/Build_CentOS7_VM_from_ISO.yml
  #   vars:
  #     vm_name: TEST_Centos7VM
  #     # vm_num_cpus: 2        
  #     # vm_memory_mb: 2048   
  #     # vm_disk_gb: 40            
  #     vm_datastore: "Staging"
  #     vm_network: "VM Network"
  #     vm_password_new: P@ssw0rd
  #     vm_hostname: centos7vm        
  #     vm_address: 192.168.123.59
  #     vm_netmask_cidr: 24
  #     vm_gateway: 192.168.123.1
  #     vm_dns_server: 192.168.123.1
  #     vm_domain: lab.local
  # - debug:
  #     msg: "{{item}}"
  #   loop: "{{extra_commands}}"
  # - name: Find the VM's IP Address via VMware tools
  #   community.vmware.vmware_guest_info:
  #     hostname: '{{ vcenter_address }}'
  #     username: '{{ vcenter_username }}'
  #     password: '{{ vcenter_password }}'   
  #     validate_certs: no 
  #     datacenter: "{{vcenter_datacenter}}"
  #     name: '{{ vm_name }}'
  #   delegate_to: localhost
  #   register: vmfacts
  # - debug: msg="IP Address - {{ vmfacts }}"  
  # - name: Check Hostname
  #   community.vmware.vmware_vm_shell:
  #     hostname: '{{ vcenter_address }}'
  #     username: '{{ vcenter_username }}'
  #     password: '{{ vcenter_password }}'   
  #     validate_certs: no 
  #     vm_username: "{{vm_username}}"
  #     vm_password: '{{ vm_password }}'
  #     vm_id: '{{ vm_name }}'
  #     vm_shell: '/usr/bin/sh'
  #     vm_shell_args: " -c \"[ $(hostname) == worker5.lab.local ]\""
  #     wait_for_process: true
  #   delegate_to: localhost  
  # - name: Run commands
  #   community.vmware.vmware_vm_shell:
  #     hostname: '{{ vcenter_address }}'
  #     username: '{{ vcenter_username }}'
  #     password: '{{ vcenter_password }}'   
  #     validate_certs: no 
  #     vm_username: "{{vm_username}}"
  #     vm_password: '{{ vm_password }}'
  #     vm_id: '{{ vm_name }}'
  #     vm_shell: '/usr/bin/sh'
  #     vm_shell_args: " -c \"{{item}}\""
  #     wait_for_process: true
  #   delegate_to: localhost  
  #   ignore_errors: true   
  #   loop:
  #   - "yum install -y epel-release"   
  #   - "yum config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo"
  #   - "yum remove -y docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine podman runc" 
  #   - "yum install -y docker-ce docker-ce-cli containerd.io"   
  #   - "ps -aux | grep dockerd"
  #   - "systemctl enable docker --now"

  # - name: Check selinux
  #   community.vmware.vmware_vm_shell:
  #     hostname: '{{ vcenter_address }}'
  #     username: '{{ vcenter_username }}'
  #     password: '{{ vcenter_password }}'   
  #     validate_certs: no 
  #     vm_username: "{{vm_username}}"
  #     vm_password: '{{ vm_password }}'
  #     vm_id: '{{ vm_name }}'
  #     vm_shell: '/usr/bin/sh'
  #     vm_shell_args: " -c \"[ $(cat /etc/selinux/config | grep ^SELINUX=) == SELINUX=disabled ]\""
  #     wait_for_process: true
  #   delegate_to: localhost  

# testing commands into windows
  # - name: Run extra commands in powershell
  #   community.vmware.vmware_vm_shell:
  #     hostname: '{{ vcenter_address }}'
  #     username: '{{ vcenter_username }}'
  #     password: '{{ vcenter_password }}' 
  #     validate_certs: no
  #     vm_username: "{{vm_username}}"
  #     vm_password: "{{ vm_password }}"
  #     vm_id: "{{ vm_name }}"
  #     vm_shell: 'c:\windows\system32\windowspowershell\v1.0\powershell.exe'
  #     vm_shell_args: " -command \"({{item}})\""
  #     wait_for_process: true
  #   delegate_to: localhost
  #   retries: 3
  #   delay: 10 
  #   register: result           
  #   until: result is succeeded    
  #   ignore_errors: true
  #   loop: "{{extra_commands}}"
  #   when: extra_commands is defined

      # Configure upstream DNS via vmware_vm_shell      
      #- "Set-DnsClientServerAddress -InterfaceAlias Ethernet0 -ServerAddresses {{ vm_dns_server }}"
      # Install AD-Domain-Services
      # - "Install-windowsfeature AD-Domain-Services -IncludeAllSubFeature -IncludeManagementTools"
      #- "Install-windowsfeature DNS -IncludeAllSubFeature -IncludeManagementTools"
      # # Install RSAT-ADDS        
      # - "Install-windowsfeature RSAT-ADDS"
      # Install AD
      # - "set-executionpolicy unrestricted"
      # - "Import-module addsdeployment"
      # - "Install-ADDSForest -DomainName {{vm_domain}} -InstallDns:$true -SafeModeAdministratorPassword $(convertto-securestring {{ vm_password }} -AsPlainText -Force) -Force -WarningAction silentlyContinue"
#&import-module addsdeployment; 
  - name: check hostname
    community.vmware.vmware_vm_shell:
      hostname: '{{ vcenter_address }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'  
      validate_certs: no 
      vm_username: "{{vm_username}}"
      vm_password: '{{ vm_password }}'
      vm_id: '{{ vm_name }}'
      vm_shell: 'c:\windows\system32\windowspowershell\v1.0\powershell.exe'
      vm_shell_args: " -command \"({{item}})\""
      wait_for_process: true
    delegate_to: localhost
    register: checkhostname           
    ignore_errors: true
    loop:
      - "$result=$(if($($osInfo = Get-WmiObject -Class Win32_OperatingSystem;$osInfo.ProductType) -ne 2){throw})"




